"""
Set of stuff to help extract the bag of words sequences to numpy arrays
"""

__author__ = 'Aaron Gonzales'
__email__ = 'agonzales@cs.unm.edu'
__licence__ = 'Apache'

import itertools as it
import numpy as np


def upack_doc(doc, key, test=False):
    """
    Unpacks a single document as a dictionary based on the key.
    Requires a hexcode key to be present
    """
    if test is True:
        return (doc['id'], 0, uzip_dict(doc['hexcode'][key]))
    else:
        return (doc['id'], int(doc['class']), uzip_dict(doc['hexcode'][key]))


def uzip_dict(dictionary):
    """
    Utilty to unzip the items in a dictionary and return just the values
    """
    keys, vals = uzip(dictionary.items())
    return vals


def uzip(item):
    """
    Utility to unzip an iterable
    """
    return list(zip(*item))


def upack_query(doc_iter, key, numpy, test=False):
    """
    Requires a mongodb curor or any iterable with dictionary items in it
    Returns either a tuple of numpy arrays or of python lists
    of the object ids, class labels, and specified ngram
    Args:
        doc_iter (iterable): duh
        key (string) the ngram specifier, ['bigrams', 'unigrams']
        numpy (boolean): True if you want a set of numpy arrays
        test (boolean): indicates if you want to parse the test or training
        set. if test specified, it returns a 0 for all class labels
    """
    id_, class_, ngram = uzip([upack_doc(doc, key, test) for doc in doc_iter])
    if numpy is True:
        return make_numpy((id_, class_, ngram))
    if numpy is False:
        return id_, class_, ngram


def make_numpy(tup):
    """
    Helper function to return numpy arrays
    """
    id_, class_, ngram = tup
    return np.asarray(id_), np.asarray(class_), np.asarray(ngram)
